[{"/Users/David/CodingDojo/React/react-practice/src/index.js":"1","/Users/David/CodingDojo/React/react-practice/src/App.js":"2","/Users/David/CodingDojo/React/react-practice/src/reportWebVitals.js":"3"},{"size":554,"mtime":1609592763145,"results":"4","hashOfConfig":"5"},{"size":6380,"mtime":1609654360256,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609591441202,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9fw0jh",{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/David/CodingDojo/React/react-practice/src/index.js",[],"/Users/David/CodingDojo/React/react-practice/src/App.js",["16","17","18","19"],"import '../node_modules/todomvc-app-css/index.css'\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = (props) => {\n  return (\n    <header className={\"header\"}>\n      <h1>todos</h1>\n    </header>\n  )\n}\n\nconst NewInput = (props) => {\n  return(\n    <section id=\"new-input\">\n      <input id=\"new-inputfield\" onKeyDown={props.onKeyDown} className={\"new-todo\"} placeholder={\"What needs to be done?\"}/>\n      <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" checked={props.isChecked} onChange={props.toggleAll}/>\n      <label onChange={props.toggleAll} style={styles.toggleAll} for=\"toggle-all\">></label>\n    </section>\n  )\n}\nNewInput.propTypes = {\n  onKeyDown: PropTypes.func.isRequired,\n  toggleAll: PropTypes.func.isRequired\n}\n\nvar styles = {\n  toggleAll: {\n    top: '15px',\n    left: '-10px'\n  }\n}\n\nconst TodoItem = (props) => {\n  var cls = null;\n  if (props.completed) {\n    cls = 'completed';\n  }\n  return(\n    <li className={cls} key={props.datakey}>\n      <input onChange={props.toggle} datakey={props.datakey} className=\"toggle\" type=\"checkbox\" checked={props.completed}/>\n      <label datakey={props.datakey} checked={props.isChecked}>{props.text}</label>\n      <button datakey={props.datakey} onClick={props.delete} className=\"destroy\"/>\n    </li>\n  )\n}\nTodoItem.propTypes = {\n  text: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  datakey: PropTypes.number.isRequired,\n  toggle: PropTypes.func.isRequired,\n  delete: PropTypes.func.isRequired\n}\n\nconst Footer = (props) => {\n  var counterText = 'items left';\n  if (props.count === 1) {\n    counterText = 'item left';\n  }\n  const filters = props.filters.map((item, index) => {\n    var selected = null;\n    if (item.checksFor == props.currentFilter) {\n      selected = 'selected';\n    };\n    var checkValue = null;\n    if(item.checksFor != null) {\n      checkValue = item.checksFor.toString();\n    }\n    return <li><a href=\"#\" className={selected} onClick={props.selectFilter} checksfor={checkValue}>{item.name}</a></li>\n  });\n  var clear = null;\n  if (props.anyComplete) {\n    clear = <button class=\"clear-completed\" onClick={props.clearCompleted}>Clear Completed</button>\n  }\n  return(\n    <footer class=\"footer\">\n      <span class=\"todo-count\"><strong>{props.count}</strong> {counterText}</span>\n      <ul class=\"filters\">\n        {filters}\n      </ul>\n      {clear}\n    </footer>\n  )\n};\nFooter.propTypes = {\n  count: PropTypes.number.isRequired,\n  selectFilter: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  anyComplete: PropTypes.bool.isRequired,\n  clearCompleted: PropTypes.func.isRequired\n}\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTodo = this.newTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.toggleAll = this.toggleAll.bind(this);\n    this.toggleTodo = this.toggleTodo.bind(this);\n    this.checkTopCheckbox = this.checkTopCheckbox.bind(this);\n    this.clearCompleted = this.clearCompleted.bind(this);\n    this.applyFilter = this.applyFilter.bind(this);\n    this.state = {\n      todos: [],\n      allToggled: true,\n      currentFilter: null,\n      filters: [\n        {name: 'All', checksFor: null},\n        {name: 'Active', checksFor: false},\n        {name: 'Completed', checksFor: true}\n      ]\n    }\n  }\n  newTodo(e) {\n    if (e.key === 'Enter') {\n      var todoText = e.target.value;\n      if (todoText !== '') {\n        this.state.todos.push({\n          text: todoText,\n          completed: false\n        })\n        this.setState({todos: this.state.todos, allToggled: false});\n        document.getElementById(\"new-inputfield\").value = '';\n      }\n    }\n  }\n  deleteTodo(e) {\n    var datakey = parseInt(e.target.getAttribute(\"datakey\"));\n    var newState = this.state.todos;\n    newState.splice(datakey, 1);\n    this.setState({todos: newState});\n    this.setState({allToggled: this.checkTopCheckbox()});\n  }\n  toggleTodo(e) {\n    var datakey = parseInt(e.target.getAttribute(\"datakey\"));\n    var newState = this.state.todos;\n    newState[datakey].completed = !newState[datakey].completed;\n    this.setState({todos: newState});\n    this.setState({allToggled: this.checkTopCheckbox()});\n  }\n  toggleAll(e) {\n    var box = document.getElementById('toggle-all');\n    var newState = this.state.todos;\n    for (var i = 0; i < this.state.todos.length; i++) {\n      if (box.checked) {\n        newState[i].completed = false;\n      } else {\n        newState[i].completed = true;\n      }\n    }\n    this.setState({todos: newState});\n    this.setState({allToggled: this.checkTopCheckbox()});\n  }\n  checkTopCheckbox() {\n    var result = this.state.todos.every(function(item) {\n      return item.completed;\n    });\n    console.log(result);\n    return result;\n  }\n  applyFilter(e) {\n    var newFilter = e.target.getAttribute(\"checksfor\");\n    if (newFilter == null) {\n      this.setState({currentFilter: null});\n    } else {\n      this.setState({currentFilter: newFilter == \"true\"});\n    }\n  }\n  clearCompleted() {\n    var newState = [];\n    for (var i = 0; i < this.state.todos.length; i++) {\n      if (!this.state.todos[i].completed) {\n        newState.push(this.state.todos[i]);\n      }\n    }\n    this.setState({todos: newState});\n  }\n  render() {\n    const todos = this.state.todos.filter(item => this.state.currentFilter == null || item.completed == this.state.currentFilter).map((item, index) => {\n      return <TodoItem completed={item.completed} datakey={index} key={index} text={item.text} delete={this.deleteTodo} toggle={this.toggleTodo}/>\n    });\n    const numLeft = this.state.todos.filter( item => !item.completed ).length;\n    const anyComplete = this.state.todos.some( item => item.completed );\n    var footer = null;\n    if (this.state.todos.length > 0) {\n      footer = <Footer count={numLeft} filters={this.state.filters} currentFilter={this.state.currentFilter} anyComplete={anyComplete} selectFilter={this.applyFilter} clearCompleted={this.clearCompleted}/>\n    }\n    return(\n      <section className={\"todoapp\"}>\n        <Header/>\n        <section className={\"main-app\"}>\n          <NewInput isChecked={!this.state.allToggled} toggleAll={this.toggleAll} onKeyDown={this.newTodo}/>\n          <ul className={\"todo-list\"}>\n            {todos}\n          </ul>\n        </section>\n        {footer}\n      </section>\n    )\n  }\n}\n\nexport default TodoApp;\n","/Users/David/CodingDojo/React/react-practice/src/reportWebVitals.js",[],["20","21"],{"ruleId":"22","severity":1,"message":"23","line":62,"column":24,"nodeType":"24","messageId":"25","endLine":62,"endColumn":26},{"ruleId":"26","severity":1,"message":"27","line":69,"column":16,"nodeType":"28","endLine":69,"endColumn":101},{"ruleId":"22","severity":1,"message":"23","line":166,"column":47,"nodeType":"24","messageId":"25","endLine":166,"endColumn":49},{"ruleId":"22","severity":1,"message":"23","line":179,"column":102,"nodeType":"24","messageId":"25","endLine":179,"endColumn":104},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-global-assign","no-unsafe-negation"]